variables:
  PANNELAPP_TF_DIR : "panelapp-infra/terraform/panelapp/"

include:
  - template: Code-Quality.gitlab-ci.yml

stages:
  - test
  - image_build
  - deploy_to_test
  - deploy_to_stage
  - deploy_to_uat
  - deploy_to_production    # Manual

# Common deploy functionality
.deploy_default:
  image: hashicorp/terraform:0.12.31
  before_script:
    - apk --no-cache add --update python3 curl wget jq
    - export DOCKER_HUB_VERSION_URL="https://hub.docker.com/v2/repositories/${DOCKERHUB_ORG}/${PACKAGE_NAME}-web/tags/${version}"
    - curl --silent --show-error -f --head -lL ${DOCKER_HUB_VERSION_URL} || (echo "Version ${version} doesn't exist in Docker Hub" && exit 1)
    - wget -q 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI -O aws_creds
    - export AWS_ACCESS_KEY_ID=$(jq -r '.AccessKeyId' aws_creds)
    - export AWS_SECRET_ACCESS_KEY=$(jq -r '.SecretAccessKey' aws_creds)
    - export AWS_SESSION_TOKEN=$(jq -r '.Token' aws_creds)
    - export AWS_DEFAULT_REGION=$default_region
    - git clone --single-branch --branch $INFRA_REF_TAG  https://$TF_CODE_REPO_USER:$TF_CODE_REPO_TOKEN@gitlab.com/genomicsengland/panelapp/panelapp-infra.git
    - git clone https://$INFRA_DEPLOY_TOKEN_USERNAME:$TF_INFRA_REPO_TOKEN@gitlab.com/genomicsengland/panelapp/panelapp-config.git
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install boto3==1.21.1

.tests:
  stage: test
  rules:
    - if: $CI_MERGE_REQUEST_ID

code_quality:
  extends: .tests
  artifacts:
    paths: [gl-code-quality-report.json]
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: $CI_MERGE_REQUEST_ID

# Code checks
## run unit and integration tests
code_test:
  image: python:3.8-alpine3.12
  extends: .tests
  coverage: /^TOTAL.+?(\d+\%)$/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  services:
    - name: postgres:9.6.9
      alias: db-postgres
  variables:
    POSTGRES_DB: panelapp
    POSTGRES_USER: panelapp
    POSTGRES_PASSWORD: secret
    DATABASE_URL: postgres://panelapp:secret@db-postgres:5432/panelapp
    DJANGO_SETTINGS_MODULE: panelapp.settings.test
    DJANGO_LOG_LEVEL: INFO
  before_script:
    - apk add --no-cache postgresql-libs git curl jpeg-dev zlib-dev gcc musl-dev curl-dev postgresql-dev build-base linux-headers libffi-dev
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install .[tests]
    - pip install pytest-runner
  script:
    - pytest --cov-report term --cov-report xml
  rules:
    - if: $NIGHTLY_TEST == "true" && $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

## Linging, formatting, etc
import_sorting:
  image: python:3.8
  extends: .tests
  before_script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install isort==5.0.5
  script:
    - isort . -c

formatter:
  image: python:3.8
  extends: .tests
  before_script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install black==22.3.0
  script:
    - black . --check

# Build docker image
image_build:
  image: docker:stable
  services:
    - docker:19.03.5-dind
  stage: image_build
  script:
    # installing py-setuptools to extract the name and version
    - apk -U add py-setuptools make
    - echo $CI_COMMIT_TAG > ./VERSION
    - export PACKAGE_NAME=$(python3 setup.py --name)
    - export PACKAGE_VERSION=$(python3 setup.py --version)
    # Check whether the Package Version matches with the TAG version
    #- (if [ PACKAGE_VERSION = $CI_COMMIT_TAG ]; then /bin/true; echo "TAG and file Version matches"; else echo "Error!! TAG NAME AND Version file did not Match";/bin/false; fi)
    # Build the docker image
    - docker build -t ${PACKAGE_NAME}-base --file ./docker/cloud/Dockerfile-base .
    - docker build -t ${PACKAGE_NAME}-web --file ./docker/cloud/Dockerfile-web .
    - docker build -t ${PACKAGE_NAME}-worker --file ./docker/cloud/Dockerfile-worker .
    # login into dockerHub to push the images
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
    # Tag the images with Version and push them to DockerHub
    - docker tag ${PACKAGE_NAME}-web $DOCKERHUB_ORG/${PACKAGE_NAME}-web:${PACKAGE_VERSION}
    - docker tag ${PACKAGE_NAME}-worker $DOCKERHUB_ORG/${PACKAGE_NAME}-worker:${PACKAGE_VERSION}
    - docker tag ${PACKAGE_NAME}-base $DOCKERHUB_ORG/${PACKAGE_NAME}-base:${PACKAGE_VERSION}
    - docker push $DOCKERHUB_ORG/${PACKAGE_NAME}-web:${PACKAGE_VERSION}
    - docker push $DOCKERHUB_ORG/${PACKAGE_NAME}-worker:${PACKAGE_VERSION}
    - docker push $DOCKERHUB_ORG/${PACKAGE_NAME}-base:${PACKAGE_VERSION}
    # Tag images as latest and push them to DockerHub
    - docker tag ${PACKAGE_NAME}-web $DOCKERHUB_ORG/${PACKAGE_NAME}-web:latest
    - docker tag ${PACKAGE_NAME}-worker $DOCKERHUB_ORG/${PACKAGE_NAME}-worker:latest
    - docker tag ${PACKAGE_NAME}-base $DOCKERHUB_ORG/${PACKAGE_NAME}-base:latest
    - docker push $DOCKERHUB_ORG/${PACKAGE_NAME}-web:latest
    - docker push $DOCKERHUB_ORG/${PACKAGE_NAME}-worker:latest
    - docker push $DOCKERHUB_ORG/${PACKAGE_NAME}-base:latest
  rules:
    - if: $CI_COMMIT_TAG =~ /\d+\.\d+\.\d+\w+?$/

# Deploy all the things
## Stage
deploy_to_stage:
  stage: deploy_to_stage
  extends:
    - .deploy_default
  environment:
    name: stage
  dependencies:
    - image_build
  tags:
    - TF_panelapp_stage
  variables:
    env_name : stage
  script:
    - export WORKING_DIR=$(pwd)
    - cd $PANNELAPP_TF_DIR; terraform init -backend-config "$WORKING_DIR/panelapp-config/$env_name/panelapp-backend.conf" && terraform plan -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var image_tag=$version && terraform apply -auto-approve -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var image_tag=$version
    - sleep 30
    - python3 $WORKING_DIR/panelapp-infra/run-ecs-task.py -tasks panelapp-migrate-panelapp-stage -panelapp
    - sleep 30
    - python3 $WORKING_DIR/panelapp-infra/run-ecs-task.py -tasks panelapp-collectstatic-panelapp-stage -panelapp
  rules:
    - if: $env_name == "stage" && $version =~ /^\d+\.\d+\.\d+(\w+)?$/

## Prod
deploy_to_production:
  stage: deploy_to_production
  extends:
    - .deploy_default
  environment:
    name: prod
  tags:
    - TF_panelapp_prod
  variables:
    env_name : prod
  script:
    - export WORKING_DIR=$(pwd)
    # Take DB snapshot and delete the old one
    - python3 $WORKING_DIR/panelapp-infra/rds_snapshot.py -create -recycle
    - sleep 60
    - cd $PANNELAPP_TF_DIR; terraform init -backend-config "$WORKING_DIR/panelapp-config/$env_name/panelapp-backend.conf" && terraform plan -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var image_tag=$version && terraform apply -auto-approve -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var image_tag=$version
    - sleep 30
    - python3 $WORKING_DIR/panelapp-infra/run-ecs-task.py -tasks panelapp-migrate-panelapp-prod -panelapp
    - sleep 30
    - python3 $WORKING_DIR/panelapp-infra/run-ecs-task.py -tasks panelapp-collectstatic-panelapp-prod -panelapp
  rules:
    - if: $env_name == "prod" && $version =~ /^\d+\.\d+\.\d+(\w+)?$/
      when: manual

## Test
deploy_to_test:
  extends:
    - .deploy_default
  stage: deploy_to_test
  environment:
    name: test
  dependencies:
    - image_build
  tags:
    - TF_panelapp_test
  variables:
    env_name : test
  script:
    - export WORKING_DIR=$(pwd)
    - cd $PANNELAPP_TF_DIR; terraform init -backend-config "$WORKING_DIR/panelapp-config/$env_name/panelapp-backend.conf" && terraform plan -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var image_tag=$version && terraform apply -auto-approve -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var image_tag=$version
    - sleep 30
    - python3 $WORKING_DIR/panelapp-infra/run-ecs-task.py -tasks panelapp-migrate-panelapp-test -panelapp
    - sleep 30
    - python3 $WORKING_DIR/panelapp-infra/run-ecs-task.py -tasks panelapp-collectstatic-panelapp-test -panelapp
  rules:
    - if: $env_name == "test" && $version =~ /^\d+\.\d+\.\d+(\w+)?$/

## UAT

deploy_to_uat:
  stage: deploy_to_uat
  extends:
    - .deploy_default
  environment:
    name: uat
  dependencies:
    - image_build
  tags:
    - TF_panelapp_uat
  variables:
    env_name : uat
  script:
    - export WORKING_DIR=$(pwd)
    - cd $PANNELAPP_TF_DIR; terraform init -backend-config "$WORKING_DIR/panelapp-config/$env_name/panelapp-backend.conf" && terraform plan -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var image_tag=$version && terraform apply -auto-approve -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var image_tag=$version
    - sleep 30
    - python3 $WORKING_DIR/panelapp-infra/run-ecs-task.py -tasks panelapp-migrate-panelapp-uat -panelapp
    - sleep 30
    - python3 $WORKING_DIR/panelapp-infra/run-ecs-task.py -tasks panelapp-collectstatic-panelapp-uat -panelapp
  rules:
    - if: $env_name == "uat" && $version =~ /^\d+\.\d+\.\d+(\w+)?$/
      when: manual
