variables:
  PANNELAPP_TF_DIR : "panelapp-infra/terraform/panelapp/"

stages:
   - code_test
   - image_build
   - deploy_to_stage         # Manual
   - deploy_to_production    # Manual
   - deploy_to_test          # Manual
   - destroy_stage           # Manual

code_test:
  image: python:3.6.8-alpine3.9
  stage: code_test
  only:
    - tags
    - merge_requests
    - branches # FIXME will be removed once access issue is resolved
  services:
    - name: postgres:9.6.9
      alias: db-postgres
  variables:
    POSTGRES_DB: panelapp
    POSTGRES_USER: panelapp
    POSTGRES_PASSWORD: secret
    DATABASE_URL: postgres://panelapp:secret@db-postgres:5432/panelapp
    DJANGO_SETTINGS_MODULE: panelapp.settings.test
    DJANGO_LOG_LEVEL: INFO
  script:
    - apk add --no-cache postgresql-libs git curl jpeg-dev zlib-dev gcc musl-dev curl-dev postgresql-dev build-base linux-headers
    - pip install .[tests]
    - pip install pytest-runner
    - pytest



image_build:
  image: docker:stable
  dependencies:
    - code_test
  only:
    refs:
      - tags
      - branches
    #variables:
    # - $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+\w*$/
  services:
    - docker:dind
  stage: image_build
  script:
    # installing py-setuptools to extract the name and version
    - apk -U add py-setuptools
    - export PACKAGE_NAME=$(python setup.py --name)
    - export PACKAGE_VERSION=$(python setup.py --version)
    # Check whether the Package Version matches with the TAG version
    #- (if [ $PACKAGE_NAME = $CI_COMMIT_TAG ]; then /bin/true; echo "TAG and file Version matches"; else echo "Error!! TAG NAME AND Version file did not Match";/bin/false; fi)  # FIXME - To avid stage failure while testing
    # Build the docker image
    - docker build -t ${PACKAGE_NAME}-base --file ./docker/cloud/Dockerfile-base .
    - docker build -t ${PACKAGE_NAME}-web --file ./docker/cloud/Dockerfile-web .
    - docker build -t ${PACKAGE_NAME}-worker --file ./docker/cloud/Dockerfile-worker .
    # login into dockerHub to push the images
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
    # Tag the images with Version and push them to DockerHub
    - docker tag ${PACKAGE_NAME}-web $DOCKERHUB_ORG/${PACKAGE_NAME}-web:${PACKAGE_VERSION}
    - docker tag ${PACKAGE_NAME}-worker $DOCKERHUB_ORG/${PACKAGE_NAME}-worker:${PACKAGE_VERSION}
    - docker tag ${PACKAGE_NAME}-base $DOCKERHUB_ORG/${PACKAGE_NAME}-base:${PACKAGE_VERSION}
    - docker push $DOCKERHUB_ORG/${PACKAGE_NAME}-web:${PACKAGE_VERSION}
    - docker push $DOCKERHUB_ORG/${PACKAGE_NAME}-worker:${PACKAGE_VERSION}
    - docker push $DOCKERHUB_ORG/${PACKAGE_NAME}-base:${PACKAGE_VERSION}
    # Tag images as latest and push them to DockerHub
    - docker tag ${PACKAGE_NAME}-web $DOCKERHUB_ORG/${PACKAGE_NAME}-web:latest
    - docker tag ${PACKAGE_NAME}-worker $DOCKERHUB_ORG/${PACKAGE_NAME}-worker:latest
    - docker tag ${PACKAGE_NAME}-base $DOCKERHUB_ORG/${PACKAGE_NAME}-base:latest
    - docker push $DOCKERHUB_ORG/${PACKAGE_NAME}-web:latest
    - docker push $DOCKERHUB_ORG/${PACKAGE_NAME}-worker:latest
    - docker push $DOCKERHUB_ORG/${PACKAGE_NAME}-base:latest

deploy_to_stage:
   stage: deploy_to_stage
   except:
    - schedules
   when: manual
   environment:
     name: stage
     on_stop: destroy_stage
   # Deploy the new image to Development will start only if the image built is success
   #dependencies:
    # - image_build
   tags:
     - TF_panelapp_stage
#   only:
#     refs:
#       - tags
#     variables:
#       - $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+\w*$/
   variables:
     env_name : stage
   before_script:
     - wget -q 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI -O aws_creds
     - export AWS_ACCESS_KEY_ID=$(jq -r '.AccessKeyId' aws_creds)
     - export AWS_SECRET_ACCESS_KEY=$(jq -r '.SecretAccessKey' aws_creds)
     - export AWS_SESSION_TOKEN=$(jq -r '.Token' aws_creds)
     - export AWS_DEFAULT_REGION=$default_region
     - git clone --single-branch --branch $INFRA_REF_TAG  https://$TF_CODE_REPO_USER:$TF_CODE_REPO_TOKEN@gitlab.com/genomicsengland/panelapp/panelapp-infra.git
     - git clone https://$INFRA_DEPLOY_TOKEN_USERNAME:$TF_INFRA_REPO_TOKEN@gitlab.com/genomicsengland/panelapp/panelapp-config.git
   script:
     - export WORKING_DIR=$(pwd)
     #- cd $PANNELAPP_TF_DIR; terraform init -backend-config "$WORKING_DIR/panelapp-config/$env_name/panelapp-backend.conf" && terraform plan -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var 'image_tag=$CI_COMMIT_TAG' && terraform apply -auto-approve -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var 'image_tag=$CI_COMMIT_TAG'
     - cd $PANNELAPP_TF_DIR; terraform init -backend-config "$WORKING_DIR/panelapp-config/$env_name/panelapp-backend.conf" && terraform plan -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var 'image_tag=latest' && terraform apply -auto-approve -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var 'image_tag=latest'
     - sleep 30
     - python3 $WORKING_DIR/panelapp-infra/run-ecs-task.py -tasks panelapp-migrate-panelapp-stage -panelapp
     - sleep 30
     - python3 $WORKING_DIR/panelapp-infra/run-ecs-task.py -tasks panelapp-collectstatic-panelapp-stage -panelapp


destroy_stage:
  stage: deploy_to_stage
  when: manual
  variables:
     env_name : stage
  environment:
    name: stage
    action: stop
  tags:
    - TF_panelapp_stage
  before_script:
    - wget -q 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI -O aws_creds
    - export AWS_ACCESS_KEY_ID=$(jq -r '.AccessKeyId' aws_creds)
    - export AWS_SECRET_ACCESS_KEY=$(jq -r '.SecretAccessKey' aws_creds)
    - export AWS_SESSION_TOKEN=$(jq -r '.Token' aws_creds)
    - export AWS_DEFAULT_REGION=$default_region
    - git clone --single-branch --branch $INFRA_REF_TAG  https://$TF_CODE_REPO_USER:$TF_CODE_REPO_TOKEN@gitlab.com/genomicsengland/panelapp/panelapp-infra.git
    - git clone https://$INFRA_DEPLOY_TOKEN_USERNAME:$TF_INFRA_REPO_TOKEN@gitlab.com/genomicsengland/panelapp/panelapp-config.git
  script:
    - export WORKING_DIR=$(pwd)
    - cd $PANNELAPP_TF_DIR; terraform init -backend-config "$WORKING_DIR/panelapp-config/$env_name/panelapp-backend.conf" && terraform plan -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var 'create_aurora=false' -var 'panelapp_replica=0' && terraform apply -auto-approve -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var 'create_aurora=false' -var 'panelapp_replica=0'


deploy_to_production:
   stage: deploy_to_production
   except:
    - schedules
   when: manual
   environment:
     name: prod
   # Deploy the new image to Development will start only if the image built is success
   #dependencies:
    # - deploy_to_stage
   tags:
     - TF_panelapp_prod
#   only:
#     refs:
#       - tags
#     variables:
#       - $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+\w*$/
   variables:
     env_name : prod
   before_script:
     - wget -q 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI -O aws_creds
     - export AWS_ACCESS_KEY_ID=$(jq -r '.AccessKeyId' aws_creds)
     - export AWS_SECRET_ACCESS_KEY=$(jq -r '.SecretAccessKey' aws_creds)
     - export AWS_SESSION_TOKEN=$(jq -r '.Token' aws_creds)
     - export AWS_DEFAULT_REGION=$default_region
     - git clone --single-branch --branch $INFRA_REF_TAG  https://$TF_CODE_REPO_USER:$TF_CODE_REPO_TOKEN@gitlab.com/genomicsengland/panelapp/panelapp-infra.git
     - git clone https://$INFRA_DEPLOY_TOKEN_USERNAME:$TF_INFRA_REPO_TOKEN@gitlab.com/genomicsengland/panelapp/panelapp-config.git
   script:
     - export WORKING_DIR=$(pwd)
     # Take DB snapshot and delete the old one
     - aws docdb create-db-cluster-snapshot --db-cluster-identifier aurora-prod --db-cluster-snapshot-identifier predeployment-$CI_JOB_ID
     - sleep 60
     #- cd $PANNELAPP_TF_DIR; terraform init -backend-config "$WORKING_DIR/panelapp-config/$env_name/panelapp-backend.conf" && terraform plan -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var 'image_tag=$CI_COMMIT_TAG' && terraform apply -auto-approve -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var 'image_tag=$CI_COMMIT_TAG'
     - cd $PANNELAPP_TF_DIR; terraform init -backend-config "$WORKING_DIR/panelapp-config/$env_name/panelapp-backend.conf" && terraform plan -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var 'image_tag=latest' #&& terraform apply -auto-approve -var-file="$WORKING_DIR/panelapp-config/$env_name/terraform.tfvars" -var 'image_tag=latest'
     - sleep 30
     - python3 $WORKING_DIR/panelapp-infra/run-ecs-task.py -tasks panelapp-migrate-panelapp-prod -panelapp
     - sleep 30
     - python3 $WORKING_DIR/panelapp-infra/run-ecs-task.py -tasks panelapp-collectstatic-panelapp-prod -panelapp


deploy_to_test:
  stage: deploy_to_test
  only:
    - schedules
  tags:
    - executor:docker
  environment:
    name: test
    on_stop: destroy_test
  variables:
    env_name: test
  script:
    - echo "deploying code to $env_name and version $version"

destroy_test:
  when: manual
  only:
    - schedules
  stage: deploy_to_test
  tags:
    - executor:docker
  environment:
    name: test
    action: stop
  script:
    - echo "this will bring down the env $env_name and version $version"
