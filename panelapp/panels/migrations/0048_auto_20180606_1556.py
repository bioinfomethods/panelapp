##
## Copyright (c) 2016-2019 Genomics England Ltd.
##
## This file is part of PanelApp
## (see https://panelapp.genomicsengland.co.uk).
##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2018-06-06 14:56
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
import django.core.serializers.json
import django.db.models.deletion
from django.conf import settings
from django.db import (
    migrations,
    models,
)


def populate_extra_data(apps, schema_editor):
    Activity = apps.get_model("panels", "Activity")
    for activity in Activity.objects.all():
        activity.extra_data = {
            "user_name": "{} {}".format(
                activity.user.first_name, activity.user.last_name
            ),
            "panel_name": activity.panel.name,
            "panel_id": activity.panel_id,
            "item_type": "entity"
            if activity.gene_symbol or activity.str_name
            else "panel",
        }

        if activity.extra_data["item_type"] == "entity":
            entity_type = "gene" if activity.gene_symbol else "str"
            entity_name = (
                activity.gene_symbol if entity_type == "gene" else activity.str_name
            )
            activity.extra_data["entity_type"] = entity_type
            activity.extra_data["entity_name"] = entity_name

        activity.item_type = activity.extra_data["item_type"]
        activity.entity_type = activity.extra_data.get("entity_type")
        activity.entity_name = activity.extra_data.get("entity_name")

        activity.save()


class Migration(migrations.Migration):

    dependencies = [("panels", "0047_auto_20180509_1014")]

    operations = [
        migrations.AlterModelOptions(name="gene", options={}),
        migrations.AddField(
            model_name="activity",
            name="extra_data",
            field=django.contrib.postgres.fields.jsonb.JSONField(
                default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder
            ),
        ),
        migrations.AlterField(
            model_name="activity",
            name="panel",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="panels.GenePanel",
            ),
        ),
        migrations.AlterField(
            model_name="activity",
            name="user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="entity_name",
            field=models.CharField(max_length=128, null=True),
        ),
        migrations.AddField(
            model_name="activity",
            name="entity_type",
            field=models.CharField(max_length=32, null=True),
        ),
        migrations.AddField(
            model_name="activity",
            name="item_type",
            field=models.CharField(max_length=32, null=True),
        ),
        migrations.RunPython(populate_extra_data),
    ]
