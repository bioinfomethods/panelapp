from unittest import mock

import pytest
from psycopg2.extras import NumericRange

from panels.models.uploaded_panel_list import EntityRow
from panels.tests.factories import RegionFactory

VALID_ROWS = [
    [
        "ABCC5-AS1",
        "gene",
        "ABCC5-AS1",
        "Expert Review Green",
        "Panel One",
        "asdf 24",
        "asdfasdf 223",
        "MITOCHONDRIAL",
        "56h",
        "asdf;asdf;asdfasd",
        "adf;jwoi",
        "adf;asdfjwo",
        "5hh6",
        "",
        "FALSE",
        "4",
        "0;0;0",
        "1.34",
        "FALSE",
        "Other",
    ],
    [
        "A1CF",
        "gene",
        "A1CF",
        "Expert Review Green",
        "Panel One",
        "asdf 24",
        "asdfasdf 223",
        "MITOCHONDRIAL",
        "57h",
        "asdf;asdf;asdfasd",
        "adf;jwoi",
        "adf;asdfjwo",
        "5hh6",
        "",
        "FALSE",
        "4",
        "0;0;0",
        "1.34",
        "FALSE",
        "Other",
    ],
    [
        "A1CF",
        "gene",
        "A1CF",
        "Expert Review Green",
        "Panel One",
        "asdf 24",
        "asdfasdf 223",
        "MONOALLELIC, autosomal or pseudoautosomal, maternally imprinted (paternal allele expressed)",
        "wef",
        "asdf;asdf;asdfasd",
        "adf;jwoi",
        "adf;asdfjwo",
        "qdf",
        "",
        "FALSE",
        "2",
        "0;0;0",
        "1.34",
        "FALSE",
        "Loss-of-function variants (as defined in pop up message) DO NOT cause this phenotype - please provide details in the comments",
    ],
    [
        "STR_1",
        "str",
        "STR_1",
        "Illumina TruGenome Clinical Sequencing Services",
        "TestPanel",
        "Parenchymal brain disorders",
        "Neurology and neurodevelopmental disorders",
        "MONOALLELIC, autosomal or pseudoautosomal, maternally imprinted (paternal allele expressed)",
        "",
        "",
        "",
        "",
        "",
        "",
        "FALSE",
        "1",
        "0;0;0",
        "1.46",
        "FALSE",
        "",
        "",
        "",
        "",
        "1",
        "12",
        "20",
        "12",
        "20",
        "AT",
        "10",
        "889",
    ],
    [
        "ISCA-37478",
        "region",
        "",
        "Other",
        "Panel One",
        "Parenchymal brain disorders",
        "Neurology and neurodevelopmental disorders",
        "BOTH monoallelic and biallelic, autosomal or pseudoautosomal",
        "ID",
        "",
        "",
        "",
        "",
        "",
        "FALSE",
        "1",
        "0;0;0",
        "1.46",
        "FALSE",
        "",
        "",
        "",
        "",
        "15",
        "",
        "",
        "341468368",
        "341468388",
        "",
        "",
        "",
        "3",
        "0",
        "10",
        "cnv_gain",
        "Verbose name",
    ],
]

INVALID_ROWS = [
    [
        "ABCC5-AS1",
        "gene",
        "ABCC5-AS2~Â£$",
        "Expert Review Green abc",
        "Panel One",
        "asdf 24",
        "asdfasdf 223",
        "MITOCHONDRIAL",
        "56h",
        "asdf;asdf;asdfasd",
        "adf;jwoi",
        "adf;asdfjwo",
        "5hh6",
        "",
        "asdf",
        "4",
        "0;0;0",
        "1.34",
        "FALSE",
        "Other",
    ],
    [
        "A1CF",
        "unknown type",
        "A1CF",
        "Expert Review Green",
        "Panel One",
        "asdf 24",
        "asdfasdf 223",
        "MITOCHONDRIAL",
        "57h",
        "asdf;asdf;asdfasd",
        "adf;jwoi",
        "adf;asdfjwo",
        "5hh6",
        "",
        "FALSE",
        "4",
        "0;0;0",
        "1.34",
        "FALSE",
        "Other unkown mop",
    ],
    [
        "STR_1",
        "str",
        "STR_1",
        "Illumina TruGenome Clinical Sequencing Services",
        "TestPanel",
        "Parenchymal brain disorders",
        "Neurology and neurodevelopmental disorders",
        "Some moi",
        "",
        "",
        "",
        "",
        "",
        "",
        "FALSE",
        "1",
        "0;0;0",
        "1.46",
        "FALSE",
        "",
        "",
        "",
        "",
        "1",
        "",
        "20",
        "12",
        "",
        "ATXW",
        "10",
        "",
    ],
    [
        "ISCA-37478",
        "region",
        "",
        "Other",
        "Panel One",
        "Parenchymal brain disorders",
        "Neurology and neurodevelopmental disorders",
        "BOTH monoallelic and biallelic, autosomal or pseudoautosomal",
        "ID",
        "",
        "",
        "",
        "",
        "",
        "FALSE",
        "1",
        "0;0;0",
        "1.46",
        "FALSE",
        "",
        "",
        "",
        "",
        "74",
        "",
        "",
        "3414683998",
        "341468388",
        "",
        "",
        "",
        "999",
        "0",
        "1001",
        "cnv_something",
        "Verbose name",
    ],
]


@mock.patch("panels.models.uploaded_panel_list.validate_str_exists", return_value=None)
@mock.patch(
    "panels.models.uploaded_panel_list.validate_region_exists", return_value=None
)
@mock.patch("panels.models.uploaded_panel_list.get_gene", return_value=None)
@pytest.mark.parametrize("row", VALID_ROWS)
def test_rows_valid(validate_str_mock, validate_region_mock, get_gene_mock, row):
    data = EntityRow.from_row(1, row)
    assert len(data.invalid) == 0


@mock.patch("panels.models.uploaded_panel_list.validate_str_exists", return_value=None)
@mock.patch(
    "panels.models.uploaded_panel_list.validate_region_exists", return_value=None
)
@mock.patch("panels.models.uploaded_panel_list.get_gene", return_value=None)
@pytest.mark.parametrize("row", INVALID_ROWS)
def test_rows_invalid(validate_str_mock, validate_region_mock, get_gene_mock, row):
    data = EntityRow.from_row(1, row)
    assert len(data.invalid) > 0


REGION_DATA_LOSS = [
    "ISCA-37478",
    "region",
    "",
    "Other",
    "Panel One",
    "Parenchymal brain disorders",
    "Neurology and neurodevelopmental disorders",
    "BOTH monoallelic and biallelic, autosomal or pseudoautosomal",
    "ID",
    "",
    "",
    "",
    "",
    "",
    "FALSE",
    "1",
    "0;0;0",
    "1.46",
    "FALSE",
    "",
    "",
    "",
    "",
    "15",
    "",
    "",
    "341468368",
    "341468388",
    "",
    "",
    "",
    "30",
    "0",
    "10",
    "cnv_loss",
    "Verbose name",
]


@pytest.mark.django_db
def test_rows_region_haplo_not_in_db():
    RegionFactory(
        name="ISCA-37478",
        verbose_name="Verbose name",
        chromosome="15",
        position_38=NumericRange(341468368, 341468388),
        haploinsufficiency_score="3",
        required_overlap_percentage=10,
        type_of_variants="cnv_loss",
    )
    data = EntityRow.from_row(1, REGION_DATA_LOSS)
    assert data.invalid
    assert (
        data.invalid[0].message == "Haploinsufficieny Score Not Found in PanelApp: 30"
    )


REGION_DATA_GAIN = [
    "ISCA-37478",
    "region",
    "",
    "Other",
    "Panel One",
    "Parenchymal brain disorders",
    "Neurology and neurodevelopmental disorders",
    "BOTH monoallelic and biallelic, autosomal or pseudoautosomal",
    "ID",
    "",
    "",
    "",
    "",
    "",
    "FALSE",
    "1",
    "0;0;0",
    "1.46",
    "FALSE",
    "",
    "",
    "",
    "",
    "15",
    "",
    "",
    "341468368",
    "341468388",
    "",
    "",
    "",
    "",
    "30",
    "10",
    "cnv_gain",
    "Verbose name",
]


@pytest.mark.django_db
def test_rows_region_triplo_not_in_db():
    RegionFactory(
        name="ISCA-37478",
        verbose_name="Verbose name",
        chromosome="15",
        position_38=NumericRange(341468368, 341468388),
        triplosensitivity_score="3",
        required_overlap_percentage=10,
        type_of_variants="cnv_gain",
    )
    data = EntityRow.from_row(1, REGION_DATA_GAIN)
    assert data.invalid
    assert (
        data.invalid[0].message == "Triplosensitivity Score Not Found in PanelApp: 30"
    )
