name: Main workflow, test and deploy to AWS

on:
  push:
    branches:
      - main
      - roo
      - develop

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - id: init_env
        shell: bash
        uses: FranzDiebold/github-env-vars-action@v2.8.0
        run: |
          echo "CI_ACTION_REF_NAME_SLUG=$CI_ACTION_REF_NAME_SLUG"
          echo "CI_SHA_SHORT=$CI_SHA_SHORT"
          if [ "$CI_ACTION_REF_NAME_SLUG" == "main" ] || [ "$CI_ACTION_REF_NAME_SLUG" == "master" ] || [ "$CI_ACTION_REF_NAME_SLUG" == "roo" ]; then
            echo "env_name=prod" >> "$GITHUB_OUTPUT"
          elif [ "$CI_ACTION_REF_NAME_SLUG" == "develop" ]; then
            echo "env_name=stage" >> "$GITHUB_OUTPUT"
          else
            echo "env_name=test" >> "$GITHUB_OUTPUT"
          fi
          echo "env_name=$env_name"
          echo "GITHUB_OUTPUT=$GITHUB_OUTPUT"

      - name: Log outputs
        run: |
          echo "CI_ACTION_REF_NAME_SLUG=$CI_ACTION_REF_NAME_SLUG"
          echo "CI_SHA_SHORT=$CI_SHA_SHORT"
          echo "env_name=${{ steps.init.outputs.env_name }}"
    outputs:
      env_name: ${{ steps.init_env.outputs.env_name }}

  tests:
    needs: init
    environment: ${{ needs.jobs.init.outputs.env_name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.9 ]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: panelapp
          POSTGRES_USER: panelapp
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U panelapp -d panelapp"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      POSTGRES_DB: panelapp
      POSTGRES_USER: panelapp
      POSTGRES_PASSWORD: secret
      DATABASE_URL: postgres://panelapp:secret@localhost:5432/panelapp
      DJANGO_SETTINGS_MODULE: panelapp.settings.test
      DJANGO_LOG_LEVEL: INFO
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v2.8.0

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          echo "CI_ACTION_REF_NAME_SLUG=$CI_ACTION_REF_NAME_SLUG"
          echo "CI_SHA_SHORT=$CI_SHA_SHORT"
          sudo apt-get install -y libpq-dev gcc python3-dev
          pip install pip==23.3.2
          pip install .[dev,tests]
          pip install pytest pytest-runner

      - name: Run tests
        run: pytest

  build:
    needs: init
    environment: ${{ needs.jobs.init.outputs.env_name }}
    runs-on: ubuntu-latest

    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v2.8.0

      - name: Log inputs
        run: |
          echo "CI_ACTION_REF_NAME_SLUG=$CI_ACTION_REF_NAME_SLUG"
          echo "CI_SHA_SHORT=$CI_SHA_SHORT"
          echo "region=${{ vars.AWS_REGION }}"
          echo "ENV_NAME=$ENV_NAME"
          echo "ENV_NAME=${{ needs.jobs.init.outputs.ENV_NAME }}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          export PACKAGE_NAME=$(python setup.py --name)
          echo "AWS_REGION=$AWS_REGION"
          echo "PACKAGE_NAME=$PACKAGE_NAME"
          echo "CI_ACTION_REF_NAME_SLUG=$CI_ACTION_REF_NAME_SLUG"
          echo "CI_SHA_SHORT=$CI_SHA_SHORT"
          docker build -t "${PACKAGE_NAME}-base" --file ./docker/cloud/Dockerfile-base .
          docker build -t "${PACKAGE_NAME}-web" --file ./docker/cloud/Dockerfile-web .
          docker build -t "$ECR_REGISTRY/${PACKAGE_NAME}-web:$CI_ACTION_REF_NAME_SLUG" .
          docker tag "$ECR_REGISTRY/${PACKAGE_NAME}-web:$CI_ACTION_REF_NAME_SLUG" "$ECR_REGISTRY/${PACKAGE_NAME}-web:$CI_SHA_SHORT"
          docker push "$ECR_REGISTRY/${PACKAGE_NAME}-web:$CI_ACTION_REF_NAME_SLUG"
          docker push "$ECR_REGISTRY/${PACKAGE_NAME}-web:$CI_SHA_SHORT"
          echo "web_image=$ECR_REGISTRY/${PACKAGE_NAME}-web:$CI_ACTION_REF_NAME_SLUG" >> $GITHUB_OUTPUT
          docker build -t "${PACKAGE_NAME}-worker" --file ./docker/cloud/Dockerfile-worker .
          docker build -t "$ECR_REGISTRY/${PACKAGE_NAME}-worker:$CI_ACTION_REF_NAME_SLUG" .
          docker tag "$ECR_REGISTRY/${PACKAGE_NAME}-worker:$CI_ACTION_REF_NAME_SLUG" "$ECR_REGISTRY/${PACKAGE_NAME}-worker:$CI_SHA_SHORT"
          docker push "$ECR_REGISTRY/${PACKAGE_NAME}-worker:$CI_ACTION_REF_NAME_SLUG"
          docker push "$ECR_REGISTRY/${PACKAGE_NAME}-worker:$CI_SHA_SHORT"
          echo "worker_image=$ECR_REGISTRY/${PACKAGE_NAME}-worker:$CI_ACTION_REF_NAME_SLUG" >> $GITHUB_OUTPUT
